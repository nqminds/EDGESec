on:
  release:
    types:
      - created
      - edited # can remove once CI is confirmed working
  push:
  pull_request:
    branches: [ main ]


name: Build Debian Packages

jobs:
  build:
    name: Build Debian Package
    # building a deb is super slow, but we're a public repo now, so it's free!!
    runs-on: [ubuntu-20.04]
    strategy:
      matrix:
        architecture: [arm64, amd64]
        distribution: [focal]
    env:
      OTHER_MIRROR:
        deb [arch=arm64] http://ports.ubuntu.com/ubuntu-ports ${{ matrix.distribution }} main universe | deb [arch=amd64] http://archive.ubuntu.com/ubuntu ${{ matrix.distribution }} main universe
    steps:
      - name: Checkout code
        uses: actions/checkout@v2
      - name: Cache pbuilder base
        id: cache-pbuilder-base
        uses: actions/cache@v2
        with:
          path: |
            /var/cache/pbuilder/base.tgz
          key: ${{ runner.os }}-${{ matrix.distribution }}
      - name: Install dependencies
        run: |
          sudo apt-get update && sudo apt-get install pbuilder debhelper -y
      - name: Setup pdebuilderrc for cross-compiling
        env:
          PBUILDER_RC: |
            # Enable network access, since `cmake` downloads dependencies
            USENETWORK=yes
            # Faster than default, and is requried if we want to do cross-compiling
            PBUILDERSATISFYDEPENDSCMD="/usr/lib/pbuilder/pbuilder-satisfydepends-apt"
        run: |
          echo "$PBUILDER_RC" | sudo tee -a /etc/pbuilderrc
      - name: Build pbuilder base.tgz
        if: steps.cache-pbuilder-base.outputs.cache-hit != 'true'
        run: |
          sudo pbuilder create --debootstrapopts --variant=buildd --distribution ${{ matrix.distribution }} --mirror "" --othermirror "$OTHER_MIRROR"
      - name: Build .deb
        run: |
          pdebuild --debbuildopts "-us -uc" -- --override-config --distribution ${{ matrix.distribution }} --mirror "" --othermirror "$OTHER_MIRROR" --host-arch ${{ matrix.architecture }}
      - name: Load output .deb name
        id: load-deb-name
        run: |
          DEB_PATH="$(ls -rt /var/cache/pbuilder/result/edgesec*.deb | head -1)"
          echo " ::set-output name=deb-path::${DEB_PATH}"
          echo " ::set-output name=deb-name::$(basename "${DEB_PATH}")"
      - name: Archive built debs
        uses: actions/upload-artifact@v2
        with:
          name: edgesec-built-debs
          # EDGESec is a public repo, so storage is free
          # we can always rerun action to regenerate them
          retention-days: 7
          path: |
            /var/cache/pbuilder/result/*.deb
      - name: Upload debs as Release Assets
        # only run action if this is being run from a GitHub Release
        if: ${{ github.event_name == 'release' }}
        uses: actions/github-script@v5
        with:
          github-token: ${{secrets.GITHUB_TOKEN}}
          script: |
            const fs = require('fs').promises;
            const {basename} = require("path");

            const globber = await glob.create("/var/cache/pbuilder/result/*.deb");
            const files = await globber.glob();

            for (const filePath of files) {
              console.log(`Uploading ${filePath}`);
              const filePromise = fs.readFile(filePath);
              // Determine content-length for header to upload asset
              const {size: contentLength} = await fs.stat(filePath);
              // Setup headers for API call, see Octokit Documentation:
              // https://octokit.github.io/rest.js/#octokit-routes-repos-upload-release-asset for more information
              const headers = {
                'content-type': "application/vnd.debian.binary-package",
                'content-length': contentLength,
              };
              // Upload a release asset
              // API Documentation: https://developer.github.com/v3/repos/releases/#upload-a-release-asset
              // Octokit Documentation: https://octokit.github.io/rest.js/v18#repos-upload-release-asset
              try {
                const uploadAssetResponse = await github.rest.repos.uploadReleaseAsset({
                  url: context.payload.release.upload_url,
                  headers,
                  name: basename(filePath),
                  file: await filePromise,
                });
              } catch (error) {
                // upload errors are usually since the file already exists
                console.error(`[skipped] Uploading ${basename(filePath)} failed: ${error}`);
              }
            }
