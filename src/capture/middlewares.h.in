#include <sqlite3.h>
#include <pcap.h>
#include "@EDGESEC_SOURCE_DIR@/src/capture/middleware.h"
#include "@EDGESEC_SOURCE_DIR@/src/utils/eloop.h"

#include "@EDGESEC_SOURCE_DIR@/src/capture/cleaner_middleware/cleaner_middleware.h"
#include "@EDGESEC_SOURCE_DIR@/src/capture/header_middleware/header_middleware.h"
#include "@EDGESEC_SOURCE_DIR@/src/capture/pcap_middleware/pcap_middleware.h"

#cmakedefine USE_CLEANER_MIDDLEWARE
#cmakedefine USE_HEADER_MIDDLEWARE
#cmakedefine USE_PCAP_MIDDLEWARE

struct middleware_handlers {
  const struct capture_middleware *f;
  struct middleware_context *context;
};

static const UT_icd middleware_icd = {sizeof(struct middleware_handlers), NULL, NULL, NULL};

static inline UT_array *assign_middlewares(void) {
  UT_array *handlers = NULL;

  utarray_new(handlers, &middleware_icd);

#ifdef USE_CLEANER_MIDDLEWARE
  struct middleware_handlers cleaner_handler = {
    .f = cleaner_middleware,
    .context = NULL,
  };
  utarray_push_back(handlers, &cleaner_handler);
#endif

#ifdef USE_HEADER_MIDDLEWARE
  struct middleware_handlers header_handler = {
    .f = header_middleware,
    .context = NULL,
  };
  utarray_push_back(handlers, &header_handler);
#endif

#ifdef USE_PCAP_MIDDLEWARE
  struct middleware_handlers pcap_handler = {
    .f = pcap_middleware,
    .context = NULL,
  };
  utarray_push_back(handlers, &pcap_handler);
#endif

  return handlers;
}

static inline int init_middlewares(UT_array *handlers,
                                   sqlite3 *db,
                                   char *db_path,
                                   struct eloop_data *eloop,
                                   struct pcap_context *pc) {
  struct middleware_handlers *handler = NULL;

  while ((handler = (struct middleware_handlers *) utarray_next(handlers, handler))) {
    if ((handler->context = handler->f->init(db, db_path, eloop, pc)) == NULL) {
      log_error("handle init error");
      return -1;
    }
  }

  return 0;
}

static inline void free_middlewares(UT_array *handlers)
{
  struct middleware_handlers *handler = NULL;

  while ((handler = (struct middleware_handlers *) utarray_next(handlers, handler))) {
    handler->f->free(handler->context);
    handler->context = NULL;
  }

  utarray_free(handlers);
}

static inline void process_middlewares(UT_array *handlers,
                                      char *ltype,
                                      struct pcap_pkthdr *header,
                                      uint8_t *packet,
                                      char *ifname)
{
  struct middleware_handlers *handler = NULL;

  while ((handler = (struct middleware_handlers *) utarray_next(handlers, handler))) {
    if (handler->f->process(handler->context, ltype, header, packet, ifname) < 0) {
      log_error("handler process fail");
    }
  }
}
