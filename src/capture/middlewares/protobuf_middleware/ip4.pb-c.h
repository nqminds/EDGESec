/* Generated by the protocol buffer compiler.  DO NOT EDIT! */
/* Generated from: ip4.proto */

#ifndef PROTOBUF_C_ip4_2eproto__INCLUDED
#define PROTOBUF_C_ip4_2eproto__INCLUDED

#include <protobuf-c/protobuf-c.h>

PROTOBUF_C__BEGIN_DECLS

#if PROTOBUF_C_VERSION_NUMBER < 1003000
# error This file was generated by a newer version of protoc-c which is incompatible with your libprotobuf-c headers. Please update your headers.
#elif 1004001 < PROTOBUF_C_MIN_COMPILER_VERSION
# error This file was generated by an older version of protoc-c which is incompatible with your libprotobuf-c headers. Please regenerate this file with a newer version of protoc-c.
#endif

typedef struct Ip4__Ip4Schema Ip4__Ip4Schema;

/* --- enums --- */

/* --- messages --- */

struct Ip4__Ip4Schema {
  ProtobufCMessage base;
  /*
   * Packet id
   */
  char *id;
  /*
   * Packet source address
   */
  char *ip_src;
  /*
   * Packet dest address
   */
  char *ip_dst;
  /*
   * Packet header length
   */
  uint32_t ip_hl;
  /*
   * Packet version
   */
  uint32_t ip_v;
  /*
   * Packet type of service
   */
  uint32_t ip_tos;
  /*
   * Packet total length
   */
  uint32_t ip_len;
  /*
   * Packet identification
   */
  uint32_t ip_id;
  /*
   * Packet fragment offset field
   */
  uint32_t ip_off;
  /*
   * Packet time to live
   */
  uint32_t ip_ttl;
  /*
   * Packet protocol
   */
  uint32_t ip_p;
  /*
   * Packet checksum
   */
  uint32_t ip_sum;
};
#define IP4__IP4_SCHEMA__INIT                                                  \
  {                                                                            \
    PROTOBUF_C_MESSAGE_INIT(&ip4__ip4_schema__descriptor)                      \
    , (char *)protobuf_c_empty_string, (char *)protobuf_c_empty_string,        \
        (char *)protobuf_c_empty_string, 0, 0, 0, 0, 0, 0, 0, 0, 0             \
  }

/* Ip4__Ip4Schema methods */
void ip4__ip4_schema__init(Ip4__Ip4Schema *message);
size_t ip4__ip4_schema__get_packed_size(const Ip4__Ip4Schema *message);
size_t ip4__ip4_schema__pack(const Ip4__Ip4Schema *message, uint8_t *out);
size_t ip4__ip4_schema__pack_to_buffer(const Ip4__Ip4Schema *message,
                                       ProtobufCBuffer *buffer);
Ip4__Ip4Schema *ip4__ip4_schema__unpack(ProtobufCAllocator *allocator,
                                        size_t len, const uint8_t *data);
void ip4__ip4_schema__free_unpacked(Ip4__Ip4Schema *message,
                                    ProtobufCAllocator *allocator);
/* --- per-message closures --- */

typedef void (*Ip4__Ip4Schema_Closure)(const Ip4__Ip4Schema *message,
                                       void *closure_data);

/* --- services --- */

/* --- descriptors --- */

extern const ProtobufCMessageDescriptor ip4__ip4_schema__descriptor;

PROTOBUF_C__END_DECLS

#endif /* PROTOBUF_C_ip4_2eproto__INCLUDED */
