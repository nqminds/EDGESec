/* Generated by the protocol buffer compiler.  DO NOT EDIT! */
/* Generated from: eth.proto */

#ifndef PROTOBUF_C_eth_2eproto__INCLUDED
#define PROTOBUF_C_eth_2eproto__INCLUDED

#include <protobuf-c/protobuf-c.h>

PROTOBUF_C__BEGIN_DECLS

#if PROTOBUF_C_VERSION_NUMBER < 1003000
# error This file was generated by a newer version of protoc-c which is incompatible with your libprotobuf-c headers. Please update your headers.
#elif 1004001 < PROTOBUF_C_MIN_COMPILER_VERSION
# error This file was generated by an older version of protoc-c which is incompatible with your libprotobuf-c headers. Please regenerate this file with a newer version of protoc-c.
#endif

typedef struct Eth__EthSchema Eth__EthSchema;

/* --- enums --- */

/* --- messages --- */

struct Eth__EthSchema {
  ProtobufCMessage base;
  /*
   * Packet timestamp
   */
  uint64_t timestamp;
  /*
   * Packet id
   */
  char *id;
  /*
   * Packet caplen
   */
  uint32_t caplen;
  /*
   * Packet length
   */
  uint32_t length;
  /*
   * Packet interface name
   */
  char *ifname;
  /*
   * Packet destination eth addr
   */
  char *ether_dhost;
  /*
   * Packet source ether addr
   */
  char *ether_shost;
  /*
   * Packet packet type ID field
   */
  uint32_t ether_type;
};
#define ETH__ETH_SCHEMA__INIT                                                  \
  {                                                                            \
    PROTOBUF_C_MESSAGE_INIT(&eth__eth_schema__descriptor)                      \
    , 0, (char *)protobuf_c_empty_string, 0, 0,                                \
        (char *)protobuf_c_empty_string, (char *)protobuf_c_empty_string,      \
        (char *)protobuf_c_empty_string, 0                                     \
  }

/* Eth__EthSchema methods */
void eth__eth_schema__init(Eth__EthSchema *message);
size_t eth__eth_schema__get_packed_size(const Eth__EthSchema *message);
size_t eth__eth_schema__pack(const Eth__EthSchema *message, uint8_t *out);
size_t eth__eth_schema__pack_to_buffer(const Eth__EthSchema *message,
                                       ProtobufCBuffer *buffer);
Eth__EthSchema *eth__eth_schema__unpack(ProtobufCAllocator *allocator,
                                        size_t len, const uint8_t *data);
void eth__eth_schema__free_unpacked(Eth__EthSchema *message,
                                    ProtobufCAllocator *allocator);
/* --- per-message closures --- */

typedef void (*Eth__EthSchema_Closure)(const Eth__EthSchema *message,
                                       void *closure_data);

/* --- services --- */

/* --- descriptors --- */

extern const ProtobufCMessageDescriptor eth__eth_schema__descriptor;

PROTOBUF_C__END_DECLS

#endif /* PROTOBUF_C_eth_2eproto__INCLUDED */
