/* Generated by the protocol buffer compiler.  DO NOT EDIT! */
/* Generated from: tcp.proto */

#ifndef PROTOBUF_C_tcp_2eproto__INCLUDED
#define PROTOBUF_C_tcp_2eproto__INCLUDED

#include <protobuf-c/protobuf-c.h>

PROTOBUF_C__BEGIN_DECLS

#if PROTOBUF_C_VERSION_NUMBER < 1003000
# error This file was generated by a newer version of protoc-c which is incompatible with your libprotobuf-c headers. Please update your headers.
#elif 1004001 < PROTOBUF_C_MIN_COMPILER_VERSION
# error This file was generated by an older version of protoc-c which is incompatible with your libprotobuf-c headers. Please regenerate this file with a newer version of protoc-c.
#endif


typedef struct Tcp__TcpSchema Tcp__TcpSchema;


/* --- enums --- */


/* --- messages --- */

struct  Tcp__TcpSchema
{
  ProtobufCMessage base;
  /*
   * Packet id
   */
  char *id;
  /*
   * Packet source port
   */
  uint32_t source;
  /*
   * Packet destination port
   */
  uint32_t dest;
  /*
   * Packet seq flag
   */
  uint32_t seq;
  /*
   * Packet ack_seq flag
   */
  uint32_t ack_seq;
  /*
   * Packet res1 flag
   */
  uint32_t res1;
  /*
   * Packet doff flag
   */
  uint32_t doff;
  /*
   * Packet fin flag
   */
  uint32_t fin;
  /*
   * Packet syn flag
   */
  uint32_t syn;
  /*
   * Packet rst flag
   */
  uint32_t rst;
  /*
   * Packet psh flag
   */
  uint32_t psh;
  /*
   * Packet ack flag
   */
  uint32_t ack;
  /*
   * Packet urg flag
   */
  uint32_t urg;
  /*
   * Packet window
   */
  uint32_t window;
  /*
   * Packet check
   */
  uint32_t check_p;
  /*
   * Packet urg_ptr
   */
  uint32_t urg_ptr;
};
#define TCP__TCP_SCHEMA__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&tcp__tcp_schema__descriptor) \
    , (char *)protobuf_c_empty_string, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 }


/* Tcp__TcpSchema methods */
void   tcp__tcp_schema__init
                     (Tcp__TcpSchema         *message);
size_t tcp__tcp_schema__get_packed_size
                     (const Tcp__TcpSchema   *message);
size_t tcp__tcp_schema__pack
                     (const Tcp__TcpSchema   *message,
                      uint8_t             *out);
size_t tcp__tcp_schema__pack_to_buffer
                     (const Tcp__TcpSchema   *message,
                      ProtobufCBuffer     *buffer);
Tcp__TcpSchema *
       tcp__tcp_schema__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   tcp__tcp_schema__free_unpacked
                     (Tcp__TcpSchema *message,
                      ProtobufCAllocator *allocator);
/* --- per-message closures --- */

typedef void (*Tcp__TcpSchema_Closure)
                 (const Tcp__TcpSchema *message,
                  void *closure_data);

/* --- services --- */


/* --- descriptors --- */

extern const ProtobufCMessageDescriptor tcp__tcp_schema__descriptor;

PROTOBUF_C__END_DECLS


#endif  /* PROTOBUF_C_tcp_2eproto__INCLUDED */
