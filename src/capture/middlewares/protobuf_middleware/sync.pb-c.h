/* Generated by the protocol buffer compiler.  DO NOT EDIT! */
/* Generated from: sync.proto */

#ifndef PROTOBUF_C_sync_2eproto__INCLUDED
#define PROTOBUF_C_sync_2eproto__INCLUDED

#include <protobuf-c/protobuf-c.h>

PROTOBUF_C__BEGIN_DECLS

#if PROTOBUF_C_VERSION_NUMBER < 1003000
# error This file was generated by a newer version of protoc-c which is incompatible with your libprotobuf-c headers. Please update your headers.
#elif 1004001 < PROTOBUF_C_MIN_COMPILER_VERSION
# error This file was generated by an older version of protoc-c which is incompatible with your libprotobuf-c headers. Please regenerate this file with a newer version of protoc-c.
#endif

typedef struct Tdx__VoltApi__Sync__V1__ProtobufSyncWrapper
    Tdx__VoltApi__Sync__V1__ProtobufSyncWrapper;
typedef struct Tdx__VoltApi__Sync__V1__ProtobufSyncConfiguration
    Tdx__VoltApi__Sync__V1__ProtobufSyncConfiguration;
typedef struct Tdx__VoltApi__Sync__V1__ProtobufSyncConfigurationHeader
    Tdx__VoltApi__Sync__V1__ProtobufSyncConfigurationHeader;

/* --- enums --- */

/* --- messages --- */

typedef enum {
  TDX__VOLT_API__SYNC__V1__PROTOBUF_SYNC_WRAPPER__HEADER_LOOKUP__NOT_SET = 0,
  TDX__VOLT_API__SYNC__V1__PROTOBUF_SYNC_WRAPPER__HEADER_LOOKUP_HEADER_INDEX =
      1,
  TDX__VOLT_API__SYNC__V1__PROTOBUF_SYNC_WRAPPER__HEADER_LOOKUP_HEADER_ID =
      2 PROTOBUF_C__FORCE_ENUM_TO_BE_INT_SIZE(
          TDX__VOLT_API__SYNC__V1__PROTOBUF_SYNC_WRAPPER__HEADER_LOOKUP__CASE)
} Tdx__VoltApi__Sync__V1__ProtobufSyncWrapper__HeaderLookupCase;

/*
 * Wraps arbitrary protobuf messages, with an index into the
 * `ProtobufSyncConfigurationHeader` to indicate the specific message type this
 * message wraps.
 */
struct Tdx__VoltApi__Sync__V1__ProtobufSyncWrapper {
  ProtobufCMessage base;
  /*
   * The message payload, in serialised protobuf binary format.
   * n.b. the serialisation should **not** be length-prefixed.
   */
  ProtobufCBinaryData payload;
  Tdx__VoltApi__Sync__V1__ProtobufSyncWrapper__HeaderLookupCase
      header_lookup_case;
  union {
    /*
     * The index number of the header for this message type in the Volt logger
     * configuration file.
     */
    uint32_t header_index;
    /*
     * The name of the header for this message type, will be used to lookup
     * against the `id` field in `ProtobufSyncConfiguration`. This will incur an
     * overhead in terms of the packet size, but might be preferrable if volume
     * is low or managing the header index is difficult.
     */
    char *header_id;
  };
};
#define TDX__VOLT_API__SYNC__V1__PROTOBUF_SYNC_WRAPPER__INIT                    \
  {                                                                             \
    PROTOBUF_C_MESSAGE_INIT(                                                    \
        &tdx__volt_api__sync__v1__protobuf_sync_wrapper__descriptor)            \
    , {0, NULL},                                                                \
        TDX__VOLT_API__SYNC__V1__PROTOBUF_SYNC_WRAPPER__HEADER_LOOKUP__NOT_SET, \
    {                                                                           \
      0                                                                         \
    }                                                                           \
  }

/*
 * Describes a single message type.
 * A set of one or more of these messages is specified in
 * `ProtobufSyncConfigurationHeader`.
 */
struct Tdx__VoltApi__Sync__V1__ProtobufSyncConfiguration {
  ProtobufCMessage base;
  /*
   * Optional id to associate with this configuration.
   * This can be used in the `header_id` field of `ProtobufSyncWrapper` above to
   * reference the configuration. If omitted the numerical index of the
   * configuration in `ProtobufSyncConfigurationHeader` will be used instead
   * (recommended).
   */
  char *id;
  /*
   * The actual protobuf definition text.
   * Copy and paste the source protobuf definition from the `.proto` file.
   * Only simple protobuf structures are currently supported, e.g. no imports
   * from other packages etc.
   */
  char *message_proto;
  /*
   * The name of the message within `message_proto` above that represents the
   * data to be sync'd, e.g. `TCPDumpPacket`.
   */
  char *message_name;
  /*
   * The name of the table within the target database into which the message
   * data for this type should be written.
   */
  char *table_name;
};
#define TDX__VOLT_API__SYNC__V1__PROTOBUF_SYNC_CONFIGURATION__INIT             \
  {                                                                            \
    PROTOBUF_C_MESSAGE_INIT(                                                   \
        &tdx__volt_api__sync__v1__protobuf_sync_configuration__descriptor)     \
    , (char *)protobuf_c_empty_string, (char *)protobuf_c_empty_string,        \
        (char *)protobuf_c_empty_string, (char *)protobuf_c_empty_string       \
  }

/*
 * This message is written at the beginning of every file to be ingested using
 * the `protoDbSync` utility. It contains a `header` entry for each message type
 * that may appear in the file. If the `volt logger` command is used, it will
 * create this header automatically based on the configuration it's given.
 */
struct Tdx__VoltApi__Sync__V1__ProtobufSyncConfigurationHeader {
  ProtobufCMessage base;
  /*
   * This should ideally be a persistent UUID, at minimum it must be unique
   * within the set of types of file any given instance of `protoDbSync` is
   * processing in a given folder. It is used to match up orphaned or split
   * packets that might occur when receiving data from a wire, for example, if a
   * log file is rotated midway through a packet arriving on the wire. This id
   * should persist for the life time of the set of data it describes, i.e. if a
   * wire publication is stopped and restarted at some later point, the same id
   * should be used if possible.
   */
  char *id;
  /*
   * The set of possible configurations that can appear in any given protobuf
   * sync data file. A serialised instance of this message must appear at the
   * top of each data file. Each subsequent serialised message in the data file
   * must be an instance of `ProtobufSyncWrapper`, and the `header_lookup` field
   * refers to an entry in this list.
   */
  size_t n_configuration;
  Tdx__VoltApi__Sync__V1__ProtobufSyncConfiguration **configuration;
  /*
   * Optional maximum size of the serialised messages, this doesn't need to be
   * exact and the default is 64K if omitted.
   */
  int32_t maximum_message_size;
};
#define TDX__VOLT_API__SYNC__V1__PROTOBUF_SYNC_CONFIGURATION_HEADER__INIT         \
  {                                                                               \
    PROTOBUF_C_MESSAGE_INIT(                                                      \
        &tdx__volt_api__sync__v1__protobuf_sync_configuration_header__descriptor) \
    , (char *)protobuf_c_empty_string, 0, NULL, 0                                 \
  }

/* Tdx__VoltApi__Sync__V1__ProtobufSyncWrapper methods */
void tdx__volt_api__sync__v1__protobuf_sync_wrapper__init(
    Tdx__VoltApi__Sync__V1__ProtobufSyncWrapper *message);
size_t tdx__volt_api__sync__v1__protobuf_sync_wrapper__get_packed_size(
    const Tdx__VoltApi__Sync__V1__ProtobufSyncWrapper *message);
size_t tdx__volt_api__sync__v1__protobuf_sync_wrapper__pack(
    const Tdx__VoltApi__Sync__V1__ProtobufSyncWrapper *message, uint8_t *out);
size_t tdx__volt_api__sync__v1__protobuf_sync_wrapper__pack_to_buffer(
    const Tdx__VoltApi__Sync__V1__ProtobufSyncWrapper *message,
    ProtobufCBuffer *buffer);
Tdx__VoltApi__Sync__V1__ProtobufSyncWrapper *
tdx__volt_api__sync__v1__protobuf_sync_wrapper__unpack(
    ProtobufCAllocator *allocator, size_t len, const uint8_t *data);
void tdx__volt_api__sync__v1__protobuf_sync_wrapper__free_unpacked(
    Tdx__VoltApi__Sync__V1__ProtobufSyncWrapper *message,
    ProtobufCAllocator *allocator);
/* Tdx__VoltApi__Sync__V1__ProtobufSyncConfiguration methods */
void tdx__volt_api__sync__v1__protobuf_sync_configuration__init(
    Tdx__VoltApi__Sync__V1__ProtobufSyncConfiguration *message);
size_t tdx__volt_api__sync__v1__protobuf_sync_configuration__get_packed_size(
    const Tdx__VoltApi__Sync__V1__ProtobufSyncConfiguration *message);
size_t tdx__volt_api__sync__v1__protobuf_sync_configuration__pack(
    const Tdx__VoltApi__Sync__V1__ProtobufSyncConfiguration *message,
    uint8_t *out);
size_t tdx__volt_api__sync__v1__protobuf_sync_configuration__pack_to_buffer(
    const Tdx__VoltApi__Sync__V1__ProtobufSyncConfiguration *message,
    ProtobufCBuffer *buffer);
Tdx__VoltApi__Sync__V1__ProtobufSyncConfiguration *
tdx__volt_api__sync__v1__protobuf_sync_configuration__unpack(
    ProtobufCAllocator *allocator, size_t len, const uint8_t *data);
void tdx__volt_api__sync__v1__protobuf_sync_configuration__free_unpacked(
    Tdx__VoltApi__Sync__V1__ProtobufSyncConfiguration *message,
    ProtobufCAllocator *allocator);
/* Tdx__VoltApi__Sync__V1__ProtobufSyncConfigurationHeader methods */
void tdx__volt_api__sync__v1__protobuf_sync_configuration_header__init(
    Tdx__VoltApi__Sync__V1__ProtobufSyncConfigurationHeader *message);
size_t
tdx__volt_api__sync__v1__protobuf_sync_configuration_header__get_packed_size(
    const Tdx__VoltApi__Sync__V1__ProtobufSyncConfigurationHeader *message);
size_t tdx__volt_api__sync__v1__protobuf_sync_configuration_header__pack(
    const Tdx__VoltApi__Sync__V1__ProtobufSyncConfigurationHeader *message,
    uint8_t *out);
size_t
tdx__volt_api__sync__v1__protobuf_sync_configuration_header__pack_to_buffer(
    const Tdx__VoltApi__Sync__V1__ProtobufSyncConfigurationHeader *message,
    ProtobufCBuffer *buffer);
Tdx__VoltApi__Sync__V1__ProtobufSyncConfigurationHeader *
tdx__volt_api__sync__v1__protobuf_sync_configuration_header__unpack(
    ProtobufCAllocator *allocator, size_t len, const uint8_t *data);
void tdx__volt_api__sync__v1__protobuf_sync_configuration_header__free_unpacked(
    Tdx__VoltApi__Sync__V1__ProtobufSyncConfigurationHeader *message,
    ProtobufCAllocator *allocator);
/* --- per-message closures --- */

typedef void (*Tdx__VoltApi__Sync__V1__ProtobufSyncWrapper_Closure)(
    const Tdx__VoltApi__Sync__V1__ProtobufSyncWrapper *message,
    void *closure_data);
typedef void (*Tdx__VoltApi__Sync__V1__ProtobufSyncConfiguration_Closure)(
    const Tdx__VoltApi__Sync__V1__ProtobufSyncConfiguration *message,
    void *closure_data);
typedef void (*Tdx__VoltApi__Sync__V1__ProtobufSyncConfigurationHeader_Closure)(
    const Tdx__VoltApi__Sync__V1__ProtobufSyncConfigurationHeader *message,
    void *closure_data);

/* --- services --- */

/* --- descriptors --- */

extern const ProtobufCMessageDescriptor
    tdx__volt_api__sync__v1__protobuf_sync_wrapper__descriptor;
extern const ProtobufCMessageDescriptor
    tdx__volt_api__sync__v1__protobuf_sync_configuration__descriptor;
extern const ProtobufCMessageDescriptor
    tdx__volt_api__sync__v1__protobuf_sync_configuration_header__descriptor;

PROTOBUF_C__END_DECLS

#endif /* PROTOBUF_C_sync_2eproto__INCLUDED */
